<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_240055_colledge.Logging</api_name>
        <client_callable>false</client_callable>
        <description>Responsible for logging messages to the system log and to the current session. Aid in debugging.</description>
        <name>Logging</name>
        <script><![CDATA[var Logging = Class.create();
Logging.prototype = {
    initialize: function() {
    },

    type: 'Logging'
};

Logging._shouldLog = function() {
	var x = Metadata.getProperty('log.all') === 'true';
	return x;
};

Logging._shouldLogVisible = function() {
	var x = Logging._shouldLog() && Metadata.getProperty('log.all.visible') === 'true';
	return x;
};

Logging._shouldLogInfo = function() {
	var x = Logging._shouldLog() && Metadata.getProperty('log.info') === 'true';
	return x;
};

Logging._shouldLogInfoVisible = function() {
	var x = Logging._shouldLogVisible() && Logging._shouldLogInfo() && Metadata.getProperty('log.info.visible') === 'true';
	return x;
};

Logging._shouldLogWarn = function() {
	var x = Logging._shouldLog() && Metadata.getProperty('log.warn') === 'true';
	return x;
};

Logging._shouldLogWarnVisible = function() {
	var x = Logging._shouldLogVisible() && Logging._shouldLogWarn() && Metadata.getProperty('log.warn.visible') === 'true';
	return x;
};

Logging._shouldLogCritical = function() {
	var x = Logging._shouldLog() && Metadata.getProperty('log.critical') === 'true';
	return x;
};

Logging._shouldLogCriticalVisible = function() {
	var x = Logging._shouldLogVisible() && Logging._shouldLogCritical() && Metadata.getProperty('log.critical.visible') === 'true';
	return x;
};

Logging.info = function info(message) {
	Expect.datatype.isString(message);
	if(Logging._shouldLogInfo()) {
		gs.info(message);
	}
	
	if(Logging._shouldLogInfoVisible()) {
		gs.info("CAN LOG VISIBLE");
		gs.addInfoMessage(message);
	} else {
		gs.info("COULDN'T LOG VISIBLE");
	}
};

Logging.warn = function warn(message) {
	Expect.datatype.isString(message);
	if(Logging._shouldLogInfo()) {
		gs.warn(message);
	}
	
	if(Logging._shouldLogInfoVisible()) {
		gs.addErrorMessage(message);
	}
};

Logging.critical = function critical(message) {
	Expect.datatype.isString(message);
	if(Logging._shouldLogInfo()) {
		gs.error(message);
	}
	
	if(Logging._shouldLogInfoVisible()) {
		gs.addErrorMessage(message);
	}
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>Howard.Chen@cognizant.com</sys_created_by>
        <sys_created_on>2018-10-12 04:53:26</sys_created_on>
        <sys_id>ea5f2bdedbc92300d06853184b96191c</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>Logging</sys_name>
        <sys_package display_value="colledge" source="x_240055_colledge">f48ceddedb452300d06853184b9619ba</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="colledge">f48ceddedb452300d06853184b9619ba</sys_scope>
        <sys_update_name>sys_script_include_ea5f2bdedbc92300d06853184b96191c</sys_update_name>
        <sys_updated_by>Howard.Chen@cognizant.com</sys_updated_by>
        <sys_updated_on>2018-10-16 17:36:15</sys_updated_on>
    </sys_script_include>
</record_update>

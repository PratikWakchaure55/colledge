<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>An expectation library for client side code.</description>
        <global>false</global>
        <name>x_240055_colledge.Expect</name>
        <script><![CDATA[var x_240055_colledge = x_240055_colledge || {};

x_240055_colledge.Expect = (function() {
	"use strict";
	return {
		execute: function execute(scriptType, name, fn) {
			try {
				if(typeof scriptType !== 'string') {
					throw new Error('Expect.execute: type ' + scriptType + ' was not a string');
				}
				if(typeof name !== 'string') {
					throw new Error('Expect.execute: name ' + name + ' was not a string');
				}
				fn();
			} catch (error) {
				var errorMessage = 'Type: ' + scriptType + '\n' +
								   'Name: ' + name + '\n' +
								   error;
				if(g_form) {
					g_form.addErrorMessage(errorMessage);
				}
				console.log(errorMessage);
			}
		},
		datatype: {
			_generateCheck: function _generateCheck(typeStr) {
				return function(val) {
					var type = typeof val;
					if(type === typeStr) {
						return;
					} else {
						throw new Error('expected ' + typeStr +
										', got ' + type + ' as ' + val);
					}
				};
			},

			isString: function isString(val) {
				return (this.type._generateCheck('string'))(val);
			},

			isNumber: function isNumber(val) {
				return (this.type._generateCheck('number'))(val);
			},

			isBool: function isBool(val) {
				return (this.type._generateCheck('boolean'))(val);
			},

			isUndefined: function isUndefined(val) {
				return (this.type._generateCheck('undefined'))(val);
			},

			isFunction: function isFunction(val) {
				return (this.type._generateCheck('function'))(val);
			},

			isObject: function isObject(val) {
				this.type.isNotNull(val);
				(this.type._generateCheck('object'))(val);
			},

			isNotNull: function isNotNull(val) {
				if(val === null) {
					throw new Error('expected not null');
				}
			},

			isNotUndefined: function isNotUndefined(val) {
				if(val === undefined) {
					throw new Error('expected not undefined');
				}
			},

			isValid: function isValid(val) {
				this.type.isNotNull(val);
				this.type.isNotUndefined(val);
			},

			isInstanceOf: function isInstanceOf(val, classConstructor) {
				this.type.isFunction(classFn);
				this.type.isObject(val);

				if(! (val instanceof classConstructor)) {
					throw new Error('expected value of class ' + functionName(classConstructor)
								  + ' but received the object ' + val);
				}

				function functionName( func ) {
					// Credit to SO answer at https://stackoverflow.com/questions/2648293/how-to-get-the-function-name-from-within-that-function

					// Match:
					// - ^          the beginning of the string
					// - function   the word 'function'
					// - \s+        at least some white space
					// - ([\w\$]+)  capture one or more valid JavaScript identifier characters
					// - \s*        optionally followed by white space (in theory there won't be any here,
					//              so if performance is an issue this can be omitted[1]
					// - \(         followed by an opening brace
					//
					var result = /^function\s+([\w\$]+)\s*\(/.exec( func.toString() );

					return  result  ?  result[ 1 ]  :  ''; // for an anonymous function there won't be a match
				}
			},

			isArray: function isArray(arr) {
				this.isInstanceOf(Array);
			}
		},
		
		datatypes: {
			areSame: function areSame(a, b) {
				var typeA = typeof a;
				var typeB = typeof b;
				if(typeA !== typeB) {
					throw new Error(a + ' had type ' + typeA + ' but ' + b + ' had type ' + typeB);
				}

				if(a === null && b !== null) {
					throw new Error(a + ' had type null' + ' but '
									+ b + ' had type ' + typeB);
				}

				if(a !== null && b === null) {
					throw new Error(a + ' had type ' + typeA + ' but '
									+ b + ' had type null');
				}
			}
		},
		
		actual: function(val) {
			return {
				actual: val,
				_check: function _check(comparison, operator, expected) {
					/* TODO : Fix the Expect, and turn it into correct scope */
					this.type.isBool(comparison);
					this.type.isString(operator);
					this.types.areSame(this.actual, expected);
					if(!comparison) {
						throw new Error('the following did not hold: ' + this.actual + ' ' + operator + ' ' +  expected + ' (actual vs expected)');
					}
				},

				eq: function eq(expected) {
					this._check(this.actual === expected, '===', expected);
				},

				neq: function neq(expected) {
					this._check(this.actual !== expected, '!==', expected);
				},

				gt: function gt(expected) {
					this._check(this.actual > expected, '>', expected);
				},

				gte: function gte(expected) {
					this._check(this.actual >= expected, '>=', expected);
				},

				lt: function lt(expected) {
					this._check(this.actual < expected, '<', expected);
				},

				lte: function lte(expected) {
					this._check(this.actual <= expected, '<=', expected);
				},

				type: 'Actual'
			};
		},

		type:  "Expect"
	};
})();
]]></script>
        <script_name>Expect</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>Howard.Chen@cognizant.com</sys_created_by>
        <sys_created_on>2018-10-12 12:15:13</sys_created_on>
        <sys_id>12cd49e6dbcd2300d06853184b961952</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>x_240055_colledge.Expect</sys_name>
        <sys_package display_value="colledge" source="x_240055_colledge">f48ceddedb452300d06853184b9619ba</sys_package>
        <sys_policy/>
        <sys_scope display_value="colledge">f48ceddedb452300d06853184b9619ba</sys_scope>
        <sys_update_name>sys_ui_script_12cd49e6dbcd2300d06853184b961952</sys_update_name>
        <sys_updated_by>Howard.Chen@cognizant.com</sys_updated_by>
        <sys_updated_on>2018-10-12 12:42:12</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>true</use_scoped_format>
    </sys_ui_script>
</record_update>
